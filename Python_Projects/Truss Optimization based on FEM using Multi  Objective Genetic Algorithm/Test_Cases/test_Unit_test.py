import unittest
import numpy as np
from Unit_test import get_all_elements_in_input_array,dir_cosine,transformation_matrix,single_pt_crossover,multi_pt_crossover,scaled_fitness,force_vector_calc,get_restrained_dofs
from unittest import mock
import modulefinder
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Test_get_all_elements_in_input_array(unittest.TestCase):
    '''
    ======================================================================
    Testing get_all_elements_in_input_array function
    ----------------------------------------------------------------------
    ----------------------------------------------------------------------
    return: 
    count
    ======================================================================
    '''
    def test_count(self):
        '''
        ======================================================================
        Testing return value with the exact value
        ----------------------------------------------------------------------
        ----------------------------------------------------------------------
        return: 
        count
        ======================================================================
        '''
        count=get_all_elements_in_input_array([[5,4],[4,1]])
        self.assertEqual(count,4)

        count=get_all_elements_in_input_array([[0,0],[0,0]])
        self.assertEqual(count,4)

        count=get_all_elements_in_input_array([[0.5,0.8],[0.8,0.5]])
        self.assertEqual(count,4)
#----------------------------------------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Test_dir_cosine(unittest.TestCase):
    '''
    ======================================================================
    Testing dir cosine function
    ----------------------------------------------------------------------
    ----------------------------------------------------------------------
    return: 
    directional cosines
    ======================================================================
    '''
    def test_dir_cosine(self):
        '''
        ======================================================================
        Testing return value with the exact value
        ----------------------------------------------------------------------
        ----------------------------------------------------------------------
        return: 
        directional cosines
        ======================================================================
        '''
        x_cosine,y_cosine=dir_cosine([0,0],[0,10])
        self.assertEqual(x_cosine,0)
        self.assertEqual(y_cosine,1)

        x_cosine,y_cosine=dir_cosine([0,0],[19,1])
        self.assertAlmostEqual(x_cosine,0.998617829)
        self.assertAlmostEqual(y_cosine,0.052558833)

        x_cosine,y_cosine=dir_cosine([19,1],[19,8])
        self.assertAlmostEqual(x_cosine,0)
        self.assertAlmostEqual(y_cosine,1)
#---------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Test_transformation_matrix(unittest.TestCase):
    '''
    ======================================================================
    Testing transformation_matrix
    ----------------------------------------------------------------------
    ----------------------------------------------------------------------
    return: 
    Transformation matrix
    ======================================================================
    '''
    def test_transformation_matrix(self):
        '''
        ======================================================================
        Testing return value with the exact value
        ----------------------------------------------------------------------
        ----------------------------------------------------------------------
        return: 
        Transformation matrix
        ======================================================================
        '''
        transformation_value=transformation_matrix(0,1)
        
        np.testing.assert_almost_equal(transformation_value,[[0,1,0,0],[0,0,0,1]])

        transformation_value=transformation_matrix(0.998617829,0.052558833)
        
        np.testing.assert_almost_equal(transformation_value,[[0.998617829,0.052558833,0,0],[0,0,0.998617829,0.052558833]])

#----------------------------------------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Test_single_pt_crossover(unittest.TestCase):
    '''
    ======================================================================
    Testing single_pt_crossover
    ----------------------------------------------------------------------
    ----------------------------------------------------------------------
    return: 
    Two children after crossover operation
    ======================================================================
    '''
    def test_single_pt_crossover(self):
        '''
        ======================================================================
        Testing return value with the exact value
        ----------------------------------------------------------------------
        ----------------------------------------------------------------------
        return: 
        Two children after crossover operation
        ======================================================================
        '''
        a,b=single_pt_crossover([[0,1,2,3],[4,5,6,7],[8,9,10,11]],[[100,99,98,97],[96,95,94,93],[92,91,90,89]],2)
        
        np.testing.assert_almost_equal(a,[[0,1,98,97],[4,5,94,93],[8,9,90,89]])
        np.testing.assert_almost_equal(b,[[100,99,2,3],[96,95,6,7],[92,91,10,11]])
        
#----------------------------------------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Test_multi_pt_crossover(unittest.TestCase):
    '''
    ======================================================================
    Testing multi_pt_crossover
    ----------------------------------------------------------------------
    ----------------------------------------------------------------------
    return: 
    Two children after crossover operation
    ======================================================================
    '''
    def test_multi_pt_crossover(self):
        '''
        ======================================================================
        Testing return value with the exact value
        ----------------------------------------------------------------------
        ----------------------------------------------------------------------
        return: 
        Two children after crossover operation
        ======================================================================
        '''
        a,b=multi_pt_crossover([[0,1,2,3],[4,5,6,7],[8,9,10,11]],[[100,99,98,97],[96,95,94,93],[92,91,90,89]],[1,2])
        
        np.testing.assert_almost_equal(a,[[0,99,2,3],[4,95,6,7],[8,91,10,11]])
        np.testing.assert_almost_equal(b,[[100,1,98,97],[96,5,94,93],[92,9,90,89.]])
        
#----------------------------------------------------------------------------------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Test_scaled_fitness(unittest.TestCase):
    '''
    ======================================================================
    Testing scaled_fitness
    ----------------------------------------------------------------------
    ----------------------------------------------------------------------
    return: 
    Two children after crossover operation
    ======================================================================
    '''
    def test_scaled_fitness(self):
        '''
        ======================================================================
        Testing return value with the exact value
        ----------------------------------------------------------------------
        ----------------------------------------------------------------------
        return: 
        Two children after crossover operation
        ======================================================================
        '''
        sorted_value,sorted_rank=scaled_fitness([0,5,80,1,500])
        
        np.testing.assert_almost_equal(sorted_value,[500,80,5,1,0])
        np.testing.assert_almost_equal(sorted_rank,[0.06666667,0.13333333,0.2,0.26666667,0.33333333])
        
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Test_force_vector_calc(unittest.TestCase):
    '''
    ======================================================================
    Testing force_vector_calc
    ----------------------------------------------------------------------
    ----------------------------------------------------------------------
    return: 
    Two children after crossover operation
    ======================================================================
    '''
    def test_force_vector_calc(self):
        '''
        ======================================================================
        Testing return value with the exact value
        ----------------------------------------------------------------------
        ----------------------------------------------------------------------
        return: 
        Two children after crossover operation
        ======================================================================
        '''
        class TestModule(unittest.TestCase):                                                                                                                                                          

            @unittest.mock.patch('builtins.input', force_value=[2,2,2,2])                                                                                                                          
            def test_func_list1(self, mock):   
                self.assertListEqual(list(force_vector_calc(2)),list(list([[2,2],[2,2]])))                                                                                                                                                       
            
            @unittest.mock.patch('builtins.input', force_value=[2.5,2.5,2.5,2.5])                                                                                                                          
            def test_func_list1(self, mock):   
                self.assertListEqual(list(force_vector_calc(2)),list(list([[2.5,2.5],[2.5,2.5]])))
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
class Test_get_restrained_dofs(unittest.TestCase):
    '''
    ======================================================================
    Testing get_restrained_dofs
    ----------------------------------------------------------------------
    ----------------------------------------------------------------------
    return: 
    Two children after crossover operation
    ======================================================================
    '''
    def test_get_restrained_dofs(self):
        '''
        ======================================================================
        Testing return value with the exact value
        ----------------------------------------------------------------------
        ----------------------------------------------------------------------
        return: 
        Two children after crossover operation
        ======================================================================
        '''
        class TestModule(unittest.TestCase):                                                                                                                                                          

            @unittest.mock.patch('builtins.input', restrained_values=[1,2,3,4])                                                                                                                          
            def test_func_list1(self, mock):   
                self.assertListEqual(list(get_restrained_dofs()),list(list([1,2,3,4])))                                                                                                                                                       
            
            @unittest.mock.patch('builtins.input', restrained_values=[1,2])                                                                                                                          
            def test_func_list1(self, mock):   
                self.assertListEqual(list(get_restrained_dofs()),list(list([1,2])))                                                                                                                                                       
            
#----------------------------------------------------------------------------------------------------------------------------------------------------------------
